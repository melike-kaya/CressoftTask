name: build
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read
  packages: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}                  # us-east-1
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}              # 5800....dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO: ${{ vars.ECR_REPO }}                      # demo-app-repo

jobs:
  build-sign-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- ECR login #1: docker push iÃ§in
      - name: Login to ECR (for docker push)
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
          | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          TAG="build-${GITHUB_RUN_ID}"
          docker build -t "${ECR_REPO}:${TAG}" .


      - name: Push by tag, then capture digest from ECR (with retry)
        shell: bash
        run: |
          set -euo pipefail
          TAG="build-${GITHUB_RUN_ID}"
          docker tag "${ECR_REPO}:${TAG}" "${ECR_REGISTRY}/${ECR_REPO}:${TAG}"
          DIGEST="$(docker push "${ECR_REGISTRY}/${ECR_REPO}:${TAG}" | awk '/digest:/ {print $2}')"
          if [[ -z "${DIGEST:-}" || "${DIGEST}" == "(nil)" ]]; then
            echo "ERROR: Could not parse image digest from push output"; exit 1
          fi
          echo "Resolved digest from push: ${DIGEST}"
          echo "${DIGEST}" > IMAGE_DIGEST.txt

      # refresh login so cosign verify can read referrers from ECR
      - name: Login to ECR (for cosign verify)
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
          | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Verify signature (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          IMG="${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)"
          # Use the exact workflow ref that Fulcio places into the cert:
          # e.g. owner/repo/.github/workflows/build.yml@refs/heads/main
          cosign verify \
            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${IMG}"
