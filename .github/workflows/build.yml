# Build workflow placeholder
name: build
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  id-token: write     # OIDC
  contents: read
  packages: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPO: ${{ vars.ECR_REPO }}

jobs:
  build-sign-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker build -t $ECR_REPO:build-${GITHUB_RUN_ID} .
          echo "IMAGE_TAG=$ECR_REPO:build-${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
        id: b

      - name: Push by tag, then capture digest from ECR
        shell: bash
        run: |
          set -euo pipefail
          TAG="build-${GITHUB_RUN_ID}"
      
          # tag & push (tag)
          docker tag  "$ECR_REPO:$TAG"  "$ECR_REGISTRY/$ECR_REPO:$TAG"
          docker push "$ECR_REGISTRY/$ECR_REPO:$TAG"
      
          # ECR'den remote digest'i al
          DIGEST=$(aws ecr describe-images \
            --region "${{ vars.AWS_REGION }}" \
            --repository-name "$ECR_REPO" \
            --image-ids imageTag="$TAG" \
            --query 'imageDetails[0].imageDigest' \
            --output text)
      
          echo "Resolved digest: $DIGEST"
          echo "$DIGEST" > IMAGE_DIGEST.txt

      - name: Ensure ECR login (for cosign push)
        run: |
          aws ecr get-login-password --region "${{ env.AWS_REGION }}" \
          | docker login --username AWS --password-stdin "${{ env.ECR_REGISTRY }}"


      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
      
      - name: Sign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes "${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)"
      
      - name: Generate SBOM (Syft)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft "${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)" -o spdx-json > sbom.spdx.json
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            IMAGE_DIGEST.txt
            sbom.spdx.json

      - name: Verify signature (dry-run)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/heads/main" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)"


