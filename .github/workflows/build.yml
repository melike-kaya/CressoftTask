name: build
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read
  packages: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}                  # us-east-1
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}              # 5800....dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO: ${{ vars.ECR_REPO }}                      # demo-app-repo

jobs:
  build-sign-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # --- ECR login #1: docker push için
      - name: Login to ECR (for docker push)
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
          | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          TAG="build-${GITHUB_RUN_ID}"
          docker build -t "${ECR_REPO}:${TAG}" .

      - name: Push by tag, then capture digest from ECR
        shell: bash
        run: |
          set -euo pipefail
          TAG="build-${GITHUB_RUN_ID}"
          docker tag  "${ECR_REPO}:${TAG}"  "${ECR_REGISTRY}/${ECR_REPO}:${TAG}"
          docker push "${ECR_REGISTRY}/${ECR_REPO}:${TAG}"

          DIGEST=$(aws ecr describe-images \
            --region "${AWS_REGION}" \
            --repository-name "${ECR_REPO}" \
            --image-ids imageTag="${TAG}" \
            --query 'imageDetails[0].imageDigest' \
            --output text)
          echo "Resolved digest: ${DIGEST}"
          echo "${DIGEST}" > IMAGE_DIGEST.txt

      # --- ECR login #2: cosign .sig push için
      - name: Login to ECR (for cosign sign)
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
          | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image by digest (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          IMG="${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)"
          echo "Signing ${IMG}"
          cosign sign --yes "${IMG}"

      # İmza gerçekten ECR'de mi? Kanıtla
      - name: Triangulate signature and assert exists
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          IMG="${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)"
          SIGREF=$(cosign triangulate "${IMG}")
          echo "Signature tag: ${SIGREF}"
          SIGTAG="${SIGREF##*:}"
          aws ecr describe-images \
            --region "${AWS_REGION}" \
            --repository-name "${ECR_REPO}" \
            --image-ids imageTag="${SIGTAG}" \
            --query 'imageDetails[0].imageDigest' --output text

      - name: Generate SBOM (Syft)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft "${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)" -o spdx-json > sbom.spdx.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            IMAGE_DIGEST.txt
            sbom.spdx.json

      # --- ECR login #3: cosign verify de registry'ye erişsin
      - name: Login to ECR (for cosign verify)
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
          | docker login --username AWS --password-stdin "${ECR_REGISTRY}"

      - name: Verify signature (keyless)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/heads/main" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${ECR_REGISTRY}/${ECR_REPO}@$(cat IMAGE_DIGEST.txt)"
