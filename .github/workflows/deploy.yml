# .github/workflows/deploy.yml
name: deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment"
        type: choice
        options: [dev, prod]
        required: true
      image_digest:
        description: "ECR image digest (e.g., sha256:....)"
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPO: ${{ vars.ECR_REPO }}

jobs:
  lambda-canary:
    runs-on: ubuntu-latest
    # Bu, dev/prod Environment'larınızdaki vars/secrets'i yükler
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # ---- Policy gate: imza doğrulama
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Verify signature (cosign)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/heads/main" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${ECR_REGISTRY}/${ECR_REPO}@${{ inputs.image_digest }}"

      # ---- 1) Lambda kodunu aynı DIGEST ile güncelle + versiyon yayınla
      - name: Update function code to digest & publish version
        id: upd
        run: |
          set -euo pipefail
          FN_NAME="${{ vars.FUNCTION_NAME }}"     # Environment (dev/prod) var
          DIGEST="${{ inputs.image_digest }}"

          aws lambda update-function-code \
            --function-name "$FN_NAME" \
            --image-uri "${ECR_REGISTRY}/${ECR_REPO}@${DIGEST}" \
            --region "${AWS_REGION}" >/dev/null

          VER=$(aws lambda publish-version --function-name "$FN_NAME" --query Version --output text)
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      # ---- 2) CodeDeploy ile Canary 10% -> 100% (alias: live)
      - name: Create CodeDeploy deployment (canary 10%->100%)
        id: cd
        run: |
          set -euo pipefail
          APP="${{ vars.CD_APP }}"         # Environment var
          DG="${{ vars.CD_GROUP }}"        # Environment var
          FN="${{ vars.FUNCTION_NAME }}"   # Environment var
          ALIAS="${{ vars.ALIAS_NAME }}"   # genelde 'live'
          TV="${{ steps.upd.outputs.version }}"

          cat > appspec_rendered.yml <<'EOF'
version: 0.0
Resources:
  - myLambda:
      Type: AWS::Lambda::Function
      Properties:
        Name: "__FN__"
        Alias: "__ALIAS__"
        CurrentVersion: "__TV__"
        TargetVersion:  "__TV__"
EOF

          # placeholders replace
          sed -i "s#__FN__#${FN}#g" appspec_rendered.yml
          sed -i "s#__ALIAS__#${ALIAS}#g" appspec_rendered.yml
          sed -i "s#__TV__#${TV}#g" appspec_rendered.yml

          DEPLOY_ID=$(aws deploy create-deployment \
            --application-name "$APP" \
            --deployment-group-name "$DG" \
            --revision "appSpecContent={content=$(base64 -w0 appspec_rendered.yml)}" \
            --region "${AWS_REGION}" \
            --query deploymentId --output text)

          echo "id=$DEPLOY_ID" >> "$GITHUB_OUTPUT"
          echo "DeploymentId: $DEPLOY_ID"

      # ---- 3) Canary ilerlemesini bekle
      - name: Wait for CodeDeploy deployment
        run: |
          set -euo pipefail
          DEPLOY_ID="${{ steps.cd.outputs.id }}"
          while true; do
            ST=$(aws deploy get-deployment --deployment-id "$DEPLOY_ID" --query 'deploymentInfo.status' --output text)
            echo "Status: $ST"
            case "$ST" in
              Succeeded) exit 0 ;;
              Failed|Stopped) echo "Deployment failed"; exit 1 ;;
              InProgress|Queued|Created) sleep 15 ;;
              *) sleep 10 ;;
            esac
          done

      # ---- 4) Smoke test (API Gateway /healthz)
      - name: Smoke test /healthz
        run: |
          set -euo pipefail
          API_URL="${{ vars.API_URL }}"   # Environment var (dev/prod'a özel)
          curl -sS "${API_URL}/healthz" -H "x-correlation-id: gha-${GITHUB_RUN_ID}" -f
