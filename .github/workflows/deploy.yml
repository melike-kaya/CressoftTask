# Deploy workflow placeholder
name: deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options: [dev, prod]
        required: true
      image_digest:
        description: "ECR image digest (sha256:...)"
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPO: ${{ vars.ECR_REPO }}

jobs:
  lambda-canary:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # (Opsiyonel ama önerilir) İmza doğrulama – policy gate
      - name: Verify signature
        uses: sigstore/cosign-installer@v3
      - name: Cosign verify
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/heads/main" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}@${{ inputs.image_digest }}"

      # 1) Lambda kodunu aynı DIGEST ile güncelle
      - name: Update function code (image digest)
        id: upd
        run: |
          FN_NAME=$(aws ssm get-parameter --name "/${{ inputs.environment }}/lambda/function_name" --with-decryption --query Parameter.Value --output text 2>/dev/null || echo "")
          # Eğer SSM kullanmıyorsan, Terraform outputs'u README'ye yaz; burada doğrudan isim kullan:
          FN_NAME="${FN_NAME:-${{ inputs.environment == 'dev' && 'dockyard-dev-podinfo' || 'dockyard-prod-podinfo' }}}"

          aws lambda update-function-code \
            --function-name "$FN_NAME" \
            --image-uri "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}@${{ inputs.image_digest }}" \
            --region "${{ env.AWS_REGION }}" >/dev/null

          VER=$(aws lambda publish-version --function-name "$FN_NAME" --query Version --output text)
          echo "version=$VER" >> $GITHUB_OUTPUT

      # 2) CodeDeploy ile canary 10%→100% (alias: live)
      - name: Create CodeDeploy deployment
        id: cd
        run: |
          APP="${{ inputs.environment == 'dev' && 'dockyard-dev-lambda-app' || 'dockyard-prod-lambda-app' }}"
          DG="${{ inputs.environment == 'dev' && 'dockyard-dev-lambda-dg'  || 'dockyard-prod-lambda-dg'  }}"
          FN="${{ inputs.environment == 'dev' && 'dockyard-dev-podinfo'    || 'dockyard-prod-podinfo'    }}"
          ALIAS="live"

          cat > appspec_rendered.yml <<EOF
version: 0.0
Resources:
  - myLambda:
      Type: AWS::Lambda::Function
      Properties:
        Name: "${FN}"
        Alias: "${ALIAS}"
        CurrentVersion: "${{ steps.upd.outputs.version }}"    # önceki alias versiyonu olarak da verilebilir
        TargetVersion:  "${{ steps.upd.outputs.version }}"
EOF

          DEPLOY_ID=$(aws deploy create-deployment \
            --application-name "$APP" \
            --deployment-group-name "$DG" \
            --revision "appSpecContent={content=$(base64 -w0 appspec_rendered.yml)}" \
            --region "${{ env.AWS_REGION }}" \
            --query deploymentId --output text)

          echo "id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          echo "DeploymentId: $DEPLOY_ID"

      # 3) Canary ilerlerken bekle ve sonucu doğrula
      - name: Wait for deployment
        run: |
          set -e
          DEPLOY_ID="${{ steps.cd.outputs.id }}"
          while true; do
            ST=$(aws deploy get-deployment --deployment-id "$DEPLOY_ID" --query 'deploymentInfo.status' --output text)
            echo "Status: $ST"
            case "$ST" in
              Succeeded) exit 0 ;;
              Failed|Stopped) echo "Deployment failed"; exit 1 ;;
              InProgress|Queued|Created) sleep 15 ;;
              *) sleep 10 ;;
            esac
          done

      # 4) Smoke test (API Gateway healthz)
      - name: Smoke test
        run: |
          API_URL="${{ secrets.${{ inputs.environment == 'dev' && 'DEV_API_URL' || 'PROD_API_URL' }} }}"
          # Terraform output apigw_url'i secrets/vars içinde tutman pratik olur
          curl -sS "${API_URL}/healthz" -H "x-correlation-id: gha-${GITHUB_RUN_ID}" -f
