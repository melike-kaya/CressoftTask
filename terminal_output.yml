Last login: Sat Sep  6 17:15:21 on ttys005
fundamelikekaya@unknown5655cda88923 repo_structure % aws configure
AWS Access Key ID [****************63N5]: 580073665957
AWS Secret Access Key [****************PYB3]: ^Z
zsh: suspended  aws configure
fundamelikekaya@unknown5655cda88923 repo_structure % aws configure
AWS Access Key ID [****************63N5]: AKIAYODYVWWSQBP4WWDB
AWS Secret Access Key [****************PYB3]: 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
Default region name [us-east-1]: 
Default output format [json]: 
fundamelikekaya@unknown5655cda88923 repo_structure % aws login

usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help

aws: error: argument command: Invalid choice, valid choices are:

accessanalyzer                           | account                                 
acm                                      | acm-pca                                 
amp                                      | amplify                                 
amplifybackend                           | amplifyuibuilder                        
apigateway                               | apigatewaymanagementapi                 
apigatewayv2                             | appconfig                               
appconfigdata                            | appfabric                               
appflow                                  | appintegrations                         
application-autoscaling                  | application-insights                    
application-signals                      | applicationcostprofiler                 
appmesh                                  | apprunner                               
appstream                                | appsync                                 
apptest                                  | arc-zonal-shift                         
artifact                                 | athena                                  
auditmanager                             | autoscaling                             
autoscaling-plans                        | b2bi                                    
backup                                   | backup-gateway                          
backupsearch                             | batch                                   
bcm-data-exports                         | bcm-pricing-calculator                  
bedrock                                  | bedrock-agent                           
bedrock-agent-runtime                    | bedrock-data-automation                 
bedrock-data-automation-runtime          | bedrock-runtime                         
billing                                  | billingconductor                        
braket                                   | budgets                                 
ce                                       | chatbot                                 
chime                                    | chime-sdk-identity                      
chime-sdk-media-pipelines                | chime-sdk-meetings                      
chime-sdk-messaging                      | chime-sdk-voice                         
cleanrooms                               | cleanroomsml                            
cloud9                                   | cloudcontrol                            
clouddirectory                           | cloudformation                          
cloudfront                               | cloudfront-keyvaluestore                
cloudhsm                                 | cloudhsmv2                              
cloudsearch                              | cloudsearchdomain                       
cloudtrail                               | cloudtrail-data                         
cloudwatch                               | codeartifact                            
codebuild                                | codecatalyst                            
codecommit                               | codeconnections                         
codeguru-reviewer                        | codeguru-security                       
codeguruprofiler                         | codepipeline                            
codestar-connections                     | codestar-notifications                  
cognito-identity                         | cognito-idp                             
cognito-sync                             | comprehend                              
comprehendmedical                        | compute-optimizer                       
connect                                  | connect-contact-lens                    
connectcampaigns                         | connectcampaignsv2                      
connectcases                             | connectparticipant                      
controlcatalog                           | controltower                            
cost-optimization-hub                    | cur                                     
customer-profiles                        | databrew                                
dataexchange                             | datapipeline                            
datasync                                 | datazone                                
dax                                      | deadline                                
detective                                | devicefarm                              
devops-guru                              | directconnect                           
discovery                                | dlm                                     
dms                                      | docdb                                   
docdb-elastic                            | drs                                     
ds                                       | ds-data                                 
dsql                                     | dynamodb                                
dynamodbstreams                          | ebs                                     
ec2                                      | ec2-instance-connect                    
ecr                                      | ecr-public                              
ecs                                      | efs                                     
eks                                      | eks-auth                                
elasticache                              | elasticbeanstalk                        
elastictranscoder                        | elb                                     
elbv2                                    | emr                                     
emr-containers                           | emr-serverless                          
entityresolution                         | es                                      
events                                   | evidently                               
finspace                                 | finspace-data                           
firehose                                 | fis                                     
fms                                      | forecast                                
forecastquery                            | frauddetector                           
freetier                                 | fsx                                     
gamelift                                 | gameliftstreams                         
geo-maps                                 | geo-places                              
geo-routes                               | glacier                                 
globalaccelerator                        | glue                                    
grafana                                  | greengrass                              
greengrassv2                             | groundstation                           
guardduty                                | health                                  
healthlake                               | iam                                     
identitystore                            | imagebuilder                            
importexport                             | inspector                               
inspector-scan                           | inspector2                              
internetmonitor                          | invoicing                               
iot                                      | iot-data                                
iot-jobs-data                            | iot-managed-integrations                
iotanalytics                             | iotdeviceadvisor                        
iotevents                                | iotevents-data                          
iotfleethub                              | iotfleetwise                            
iotsecuretunneling                       | iotsitewise                             
iotthingsgraph                           | iottwinmaker                            
iotwireless                              | ivs                                     
ivs-realtime                             | ivschat                                 
kafka                                    | kafkaconnect                            
kendra                                   | kendra-ranking                          
keyspaces                                | kinesis                                 
kinesis-video-archived-media             | kinesis-video-media                     
kinesis-video-signaling                  | kinesis-video-webrtc-storage            
kinesisanalytics                         | kinesisanalyticsv2                      
kinesisvideo                             | kms                                     
lakeformation                            | lambda                                  
launch-wizard                            | lex-models                              
lex-runtime                              | lexv2-models                            
lexv2-runtime                            | license-manager                         
license-manager-linux-subscriptions      | license-manager-user-subscriptions      
lightsail                                | location                                
logs                                     | lookoutequipment                        
lookoutmetrics                           | lookoutvision                           
m2                                       | machinelearning                         
macie2                                   | mailmanager                             
managedblockchain                        | managedblockchain-query                 
marketplace-agreement                    | marketplace-catalog                     
marketplace-deployment                   | marketplace-entitlement                 
marketplace-reporting                    | marketplacecommerceanalytics            
mediaconnect                             | mediaconvert                            
medialive                                | mediapackage                            
mediapackage-vod                         | mediapackagev2                          
mediastore                               | mediastore-data                         
mediatailor                              | medical-imaging                         
memorydb                                 | meteringmarketplace                     
mgh                                      | mgn                                     
migration-hub-refactor-spaces            | migrationhub-config                     
migrationhuborchestrator                 | migrationhubstrategy                    
mq                                       | mturk                                   
mwaa                                     | neptune                                 
neptune-graph                            | neptunedata                             
network-firewall                         | networkflowmonitor                      
networkmanager                           | networkmonitor                          
notifications                            | notificationscontacts                   
oam                                      | observabilityadmin                      
omics                                    | opensearch                              
opensearchserverless                     | opsworks                                
opsworkscm                               | organizations                           
osis                                     | outposts                                
panorama                                 | partnercentral-selling                  
payment-cryptography                     | payment-cryptography-data               
pca-connector-ad                         | pca-connector-scep                      
pcs                                      | personalize                             
personalize-events                       | personalize-runtime                     
pi                                       | pinpoint                                
pinpoint-email                           | pinpoint-sms-voice                      
pinpoint-sms-voice-v2                    | pipes                                   
polly                                    | pricing                                 
privatenetworks                          | proton                                  
qapps                                    | qbusiness                               
qconnect                                 | qldb                                    
qldb-session                             | quicksight                              
ram                                      | rbin                                    
rds                                      | rds-data                                
redshift                                 | redshift-data                           
redshift-serverless                      | rekognition                             
repostspace                              | resiliencehub                           
resource-explorer-2                      | resource-groups                         
resourcegroupstaggingapi                 | robomaker                               
rolesanywhere                            | route53                                 
route53-recovery-cluster                 | route53-recovery-control-config         
route53-recovery-readiness               | route53domains                          
route53profiles                          | route53resolver                         
rum                                      | s3control                               
s3outposts                               | s3tables                                
sagemaker                                | sagemaker-a2i-runtime                   
sagemaker-edge                           | sagemaker-featurestore-runtime          
sagemaker-geospatial                     | sagemaker-metrics                       
sagemaker-runtime                        | savingsplans                            
scheduler                                | schemas                                 
sdb                                      | secretsmanager                          
security-ir                              | securityhub                             
securitylake                             | serverlessrepo                          
service-quotas                           | servicecatalog                          
servicecatalog-appregistry               | servicediscovery                        
ses                                      | sesv2                                   
shield                                   | signer                                  
simspaceweaver                           | sms                                     
snow-device-management                   | snowball                                
sns                                      | socialmessaging                         
sqs                                      | ssm                                     
ssm-contacts                             | ssm-guiconnect                          
ssm-incidents                            | ssm-quicksetup                          
ssm-sap                                  | sso                                     
sso-admin                                | sso-oidc                                
stepfunctions                            | storagegateway                          
sts                                      | supplychain                             
support                                  | support-app                             
swf                                      | synthetics                              
taxsettings                              | textract                                
timestream-influxdb                      | timestream-query                        
timestream-write                         | tnb                                     
transcribe                               | transfer                                
translate                                | trustedadvisor                          
verifiedpermissions                      | voice-id                                
vpc-lattice                              | waf                                     
waf-regional                             | wafv2                                   
wellarchitected                          | wisdom                                  
workdocs                                 | workmail                                
workmailmessageflow                      | workspaces                              
workspaces-thin-client                   | workspaces-web                          
xray                                     | s3api                                   
s3                                       | ddb                                     
configure                                | deploy                                  
configservice                            | opsworks-cm                             
history                                  | cli-dev                                 
help                                    

fundamelikekaya@unknown5655cda88923 repo_structure % export AWS_REGION="eu-central-1"

fundamelikekaya@unknown5655cda88923 repo_structure % cd ..
fundamelikekaya@unknown5655cda88923 Downloads % mkdir Cressoft
fundamelikekaya@unknown5655cda88923 Downloads % cd Cressoft 
fundamelikekaya@unknown5655cda88923 Cressoft % export AWS_REGION="eu-central-1"

fundamelikekaya@unknown5655cda88923 Cressoft % export TF_STATE_BUCKET="cressoft"    
fundamelikekaya@unknown5655cda88923 Cressoft % export TF_LOCK_TABLE="terraform-cressoft"

fundamelikekaya@unknown5655cda88923 Cressoft % export NAME="cressoft"

fundamelikekaya@unknown5655cda88923 Cressoft % export GITHUB_ORG="melike-kaya"
fundamelikekaya@unknown5655cda88923 Cressoft % export GITHUB_REPO="CressoftTask"   
fundamelikekaya@unknown5655cda88923 Cressoft % export DEPLOY_BRANCH="main"
fundamelikekaya@unknown5655cda88923 Cressoft % cd ..
fundamelikekaya@unknown5655cda88923 Melike % pwd
/Users/fundamelikekaya/Desktop/Melike
fundamelikekaya@unknown5655cda88923 Melike % cd Cressoft 
fundamelikekaya@unknown5655cda88923 Cressoft % cd inf
cd: no such file or directory: inf
fundamelikekaya@unknown5655cda88923 Cressoft % ls
fundamelikekaya@unknown5655cda88923 Cressoft % git clone https://github.com/melike-kaya/CressoftTask.git
Cloning into 'CressoftTask'...
remote: Enumerating objects: 49, done.
remote: Counting objects: 100% (49/49), done.
remote: Compressing objects: 100% (17/17), done.
remote: Total 49 (delta 0), reused 49 (delta 0), pack-reused 0 (from 0)
Receiving objects: 100% (49/49), done.
fundamelikekaya@unknown5655cda88923 Cressoft % ls
CressoftTask
fundamelikekaya@unknown5655cda88923 Cressoft % cd CressoftTask 
fundamelikekaya@unknown5655cda88923 CressoftTask % ls
Dockerfile		LICENSE			appspec-ec2.yml		docs			modules
ENVIRONMENT.md		README.md		appspec-lambda.yml	infra			scripts
fundamelikekaya@unknown5655cda88923 CressoftTask % cd infra 
fundamelikekaya@unknown5655cda88923 infra % ls
ec2	global	lambda
fundamelikekaya@unknown5655cda88923 infra % cd global 
fundamelikekaya@unknown5655cda88923 global % ls
README.md	alarms.tf	backend.tf	main.tf		outputs.tf	providers.tf	variables.tf
fundamelikekaya@unknown5655cda88923 global % cat main.tf 
# Global infra (OIDC, ECR, KMS, Secrets, CW dashboard)
fundamelikekaya@unknown5655cda88923 global % vim main.tf 
fundamelikekaya@unknown5655cda88923 global % ls
README.md	alarms.tf	backend.tf	main.tf		outputs.tf	providers.tf	variables.tf
fundamelikekaya@unknown5655cda88923 global % vim backend.tf 
fundamelikekaya@unknown5655cda88923 global % vim providers.tf 
fundamelikekaya@unknown5655cda88923 global % vim providers.tf
fundamelikekaya@unknown5655cda88923 global % vim variables.tf 
fundamelikekaya@unknown5655cda88923 global % vim main.tf 
fundamelikekaya@unknown5655cda88923 global % rm main.tf 
fundamelikekaya@unknown5655cda88923 global % vim main.tf
fundamelikekaya@unknown5655cda88923 global % vim alarms.tf 
fundamelikekaya@unknown5655cda88923 global % vim outputs.tf 
fundamelikekaya@unknown5655cda88923 global % vim backend.tf 
fundamelikekaya@unknown5655cda88923 global % vim variables.tf 
fundamelikekaya@unknown5655cda88923 global % ls
README.md	alarms.tf	backend.tf	main.tf		outputs.tf	providers.tf	variables.tf
fundamelikekaya@unknown5655cda88923 global % vim variables.tf 
fundamelikekaya@unknown5655cda88923 global % ls
README.md	alarms.tf	backend.tf	main.tf		outputs.tf	providers.tf	variables.tf
fundamelikekaya@unknown5655cda88923 global % ls -ltr
total 56
-rw-r--r--  1 fundamelikekaya  staff    22 Sep  7 13:16 README.md
-rw-r--r--  1 fundamelikekaya  staff   360 Sep  7 13:30 backend.tf
-rw-r--r--  1 fundamelikekaya  staff    42 Sep  7 13:31 providers.tf
-rw-r--r--  1 fundamelikekaya  staff   492 Sep  7 13:31 variables.tf
-rw-r--r--  1 fundamelikekaya  staff  2534 Sep  7 13:32 main.tf
-rw-r--r--  1 fundamelikekaya  staff   492 Sep  7 13:32 alarms.tf
-rw-r--r--  1 fundamelikekaya  staff   383 Sep  7 13:32 outputs.tf
fundamelikekaya@unknown5655cda88923 global % cd ..
fundamelikekaya@unknown5655cda88923 infra % ls
ec2	global	lambda
fundamelikekaya@unknown5655cda88923 infra % cd ..
fundamelikekaya@unknown5655cda88923 CressoftTask % ls
Dockerfile		LICENSE			appspec-ec2.yml		docs			modules
ENVIRONMENT.md		README.md		appspec-lambda.yml	infra			scripts
fundamelikekaya@unknown5655cda88923 CressoftTask % ls -ltr
total 48
-rw-r--r--  1 fundamelikekaya  staff   25 Sep  7 13:16 Dockerfile
-rw-r--r--  1 fundamelikekaya  staff   28 Sep  7 13:16 ENVIRONMENT.md
-rw-r--r--  1 fundamelikekaya  staff   24 Sep  7 13:16 LICENSE
-rw-r--r--  1 fundamelikekaya  staff   17 Sep  7 13:16 README.md
-rw-r--r--  1 fundamelikekaya  staff   18 Sep  7 13:16 appspec-ec2.yml
-rw-r--r--  1 fundamelikekaya  staff   21 Sep  7 13:16 appspec-lambda.yml
drwxr-xr-x  4 fundamelikekaya  staff  128 Sep  7 13:16 docs
drwxr-xr-x  5 fundamelikekaya  staff  160 Sep  7 13:16 infra
drwxr-xr-x  4 fundamelikekaya  staff  128 Sep  7 13:16 modules
drwxr-xr-x  5 fundamelikekaya  staff  160 Sep  7 13:16 scripts
fundamelikekaya@unknown5655cda88923 CressoftTask % pwd
/Users/fundamelikekaya/Desktop/Melike/Cressoft/CressoftTask
fundamelikekaya@unknown5655cda88923 CressoftTask % tree
zsh: command not found: tree
fundamelikekaya@unknown5655cda88923 CressoftTask % ls
Dockerfile		LICENSE			appspec-ec2.yml		docs			modules
ENVIRONMENT.md		README.md		appspec-lambda.yml	infra			scripts
fundamelikekaya@unknown5655cda88923 CressoftTask % ls -ltr
total 48
-rw-r--r--  1 fundamelikekaya  staff   25 Sep  7 13:16 Dockerfile
-rw-r--r--  1 fundamelikekaya  staff   28 Sep  7 13:16 ENVIRONMENT.md
-rw-r--r--  1 fundamelikekaya  staff   24 Sep  7 13:16 LICENSE
-rw-r--r--  1 fundamelikekaya  staff   17 Sep  7 13:16 README.md
-rw-r--r--  1 fundamelikekaya  staff   18 Sep  7 13:16 appspec-ec2.yml
-rw-r--r--  1 fundamelikekaya  staff   21 Sep  7 13:16 appspec-lambda.yml
drwxr-xr-x  4 fundamelikekaya  staff  128 Sep  7 13:16 docs
drwxr-xr-x  5 fundamelikekaya  staff  160 Sep  7 13:16 infra
drwxr-xr-x  4 fundamelikekaya  staff  128 Sep  7 13:16 modules
drwxr-xr-x  5 fundamelikekaya  staff  160 Sep  7 13:16 scripts
fundamelikekaya@unknown5655cda88923 CressoftTask % cd infra 
fundamelikekaya@unknown5655cda88923 infra % ls
ec2	global	lambda
fundamelikekaya@unknown5655cda88923 infra % cd global 
fundamelikekaya@unknown5655cda88923 global % vim terraform.tfvars
fundamelikekaya@unknown5655cda88923 global % vim terraform.tfvars
fundamelikekaya@unknown5655cda88923 global % terraform init 
Initializing the backend...
╷
│ Error: Terraform encountered problems during initialisation, including problems
│ with the configuration, described below.
│ 
│ The Terraform configuration must be valid before initialization so that
│ Terraform can determine which modules and providers need to be installed.
│ 
│ 
╵
╷
│ Error: Argument or block definition required
│ 
│   on backend.tf line 2:
│    2: ---
│ 
│ An argument or block definition is required here.
╵
╷
│ Error: Invalid character
│ 
│   on backend.tf line 5:
│    5: ```hcl
│ 
│ The "`" character is not valid. To create a multi-line string, use the "heredoc" syntax, like "<<EOT".
╵
╷
│ Error: Invalid character
│ 
│   on backend.tf line 5:
│    5: ```hcl
│ 
│ The "`" character is not valid. To create a multi-line string, use the "heredoc" syntax, like "<<EOT".
╵
fundamelikekaya@unknown5655cda88923 global % cat backend.tf 

---

### `infra/global/backend.tf`
```hcl
terraform {
  required_version = ">= 1.9.0"
  backend "s3" {
    bucket         = "dockyard-tfstate"   # Change to unique bucket name
    key            = "global/terraform.tfstate"
    region         = "eu-central-1"
    dynamodb_table = "dockyard-tf-lock"
    encrypt        = true
  }
}
# Terraform backend config
fundamelikekaya@unknown5655cda88923 global % rm backend.tf 
fundamelikekaya@unknown5655cda88923 global % vim backend.tf
fundamelikekaya@unknown5655cda88923 global % terraform init 
Initializing the backend...
bucket
  The name of the S3 bucket

  Enter a value: terraform init \
  -backend-config="bucket=mk-dockyard-tfstate-12345" \
  -backend-config="key=global/terraform.tfstate" \
  -backend-config="region=eu-central-1" \
  -backend-config="dynamodb_table=mk-dockyard-tf-lock" \
  -backend-config="encrypt=true"

key
  The path to the state file inside the bucket

  Enter a value: 
╷
│ Error: Failed to get existing workspaces: Unable to list objects in S3 bucket "terraform init \\" with prefix "env:/": operation error S3: ListObjectsV2, https response error StatusCode: 400, RequestID: 3JTGB2JAWTD9NGNN, HostID: pX2+36/7dNnC0boJN0CyCuR2S21YWuQDlqRS8zKXQd/bpa4MDFPd8BhKYJZPLCMkxV8NfdsFn13ZkyuVI/34nKMCkv7n6heDHJG/sGU+P6E=, api error InvalidBucketName: The specified bucket is not valid.
│ 
│ 
╵
fundamelikekaya@unknown5655cda88923 global %   -backend-config="key=global/terraform.tfstate" \
>   -backend-config="region=eu-central-1" \
>   -backend-config="dynamodb_table=mk-dockyard-tf-lock" \
>   -backend-config="encrypt=true"
zsh: no such file or directory: -backend-config=key=global/terraform.tfstate
fundamelikekaya@unknown5655cda88923 global % terraform init \
  -backend-config="bucket=mk-dockyard-tfstate-12345" \
  -backend-config="key=global/terraform.tfstate" \
  -backend-config="region=eu-central-1" \
  -backend-config="dynamodb_table=mk-dockyard-tf-lock" \
  -backend-config="encrypt=true"

Initializing the backend...
╷
│ Warning: Deprecated Parameter
│ 
│   on backend.tf line 5, in terraform:
│    5:   backend "s3" {}
│ 
│ The parameter "dynamodb_table" is deprecated. Use parameter "use_lockfile" instead.
╵
╷
│ Error: Failed to get existing workspaces: S3 bucket "mk-dockyard-tfstate-12345" does not exist.
│ 
│ The referenced S3 bucket must have been previously created. If the S3 bucket
│ was created within the last minute, please wait for a minute or two and try
│ again.
│ 
│ Error: operation error S3: ListObjectsV2, https response error StatusCode: 404, RequestID: 02KT95GSBH5CZAFN, HostID: HbacWAg4Me6CtcvCoTRI6H4S+jja8RiCVY+aA8KmE0iEVU8VDEzO09I/WUj4JQMOLNyvNuEReoEv/IwRigh0ejgFlFRJs4lxiUyCOZZv8Sg=, NoSuchBucket: 
│ 
│ 
│ 
╵
fundamelikekaya@unknown5655cda88923 global % vim backend.tf "
dquote> 
fundamelikekaya@unknown5655cda88923 global % vim backend.tf  
fundamelikekaya@unknown5655cda88923 global % terraform init
Initializing the backend...

Successfully configured the backend "local"! Terraform will automatically
use this backend unless the backend configuration changes.
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v6.12.0...
- Installed hashicorp/aws v6.12.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
fundamelikekaya@unknown5655cda88923 global % terraform apply -var-file=terraform.tfvars

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_cloudwatch_metric_alarm.high_error_rate will be created
  + resource "aws_cloudwatch_metric_alarm" "high_error_rate" {
      + actions_enabled                       = true
      + alarm_description                     = "Alarm when API Gateway 5XX exceeds 5/min"
      + alarm_name                            = "dockyard-dev-high-error-rate"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanOrEqualToThreshold"
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 2
      + id                                    = (known after apply)
      + metric_name                           = "5XXError"
      + namespace                             = "AWS/ApiGateway"
      + period                                = 60
      + region                                = "eu-central-1"
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 5
      + treat_missing_data                    = "missing"
    }

  # aws_dynamodb_table.tf_lock will be created
  + resource "aws_dynamodb_table" "tf_lock" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "dockyard-tf-lock"
      + read_capacity    = (known after apply)
      + region           = "eu-central-1"
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = (known after apply)
      + write_capacity   = (known after apply)

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_ecr_repository.podinfo will be created
  + resource "aws_ecr_repository" "podinfo" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "podinfo"
      + region               = "eu-central-1"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + encryption_configuration {
          + encryption_type = "KMS"
          + kms_key         = (known after apply)
        }

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # aws_iam_openid_connect_provider.github will be created
  + resource "aws_iam_openid_connect_provider" "github" {
      + arn             = (known after apply)
      + client_id_list  = [
          + "sts.amazonaws.com",
        ]
      + id              = (known after apply)
      + tags_all        = (known after apply)
      + thumbprint_list = [
          + "6938fd4d98bab03faadb97b34396831e3780aea1",
        ]
      + url             = "https://token.actions.githubusercontent.com"
    }

  # aws_iam_policy.gha_policy will be created
  + resource "aws_iam_policy" "gha_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "dockyard-dev-gha-policy"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ecr:*",
                          + "lambda:*",
                          + "codedeploy:*",
                          + "cloudwatch:*",
                          + "logs:*",
                          + "s3:*",
                          + "dynamodb:*",
                          + "secretsmanager:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_role.gha_oidc will be created
  + resource "aws_iam_role" "gha_oidc" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dockyard-dev-gha-oidc"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy_attachment.gha_attach will be created
  + resource "aws_iam_role_policy_attachment" "gha_attach" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "dockyard-dev-gha-oidc"
    }

  # aws_kms_key.cmk will be created
  + resource "aws_kms_key" "cmk" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 7
      + description                        = "dockyard-dev CMK"
      + enable_key_rotation                = false
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + region                             = "eu-central-1"
      + rotation_period_in_days            = (known after apply)
      + tags_all                           = (known after apply)
    }

  # aws_s3_bucket.deploy will be created
  + resource "aws_s3_bucket" "deploy" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "dockyard-dev-deploy"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_region               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = "eu-central-1"
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_secretsmanager_secret.super_secret will be created
  + resource "aws_secretsmanager_secret" "super_secret" {
      + arn                            = (known after apply)
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + kms_key_id                     = (known after apply)
      + name                           = "/dockyard/SUPER_SECRET_TOKEN"
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + region                         = "eu-central-1"
      + tags_all                       = (known after apply)

      + replica (known after apply)
    }

Plan: 10 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + deploy_bucket = "dockyard-dev-deploy"
  + ecr_repo_url  = (known after apply)
  + oidc_role_arn = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_policy.gha_policy: Creating...
aws_kms_key.cmk: Creating...
aws_iam_openid_connect_provider.github: Creating...
aws_cloudwatch_metric_alarm.high_error_rate: Creating...
aws_dynamodb_table.tf_lock: Creating...
aws_s3_bucket.deploy: Creating...
aws_cloudwatch_metric_alarm.high_error_rate: Creation complete after 0s [id=dockyard-dev-high-error-rate]
aws_kms_key.cmk: Creation complete after 0s [id=b283d982-4892-4649-8161-58fa92ef5d73]
aws_secretsmanager_secret.super_secret: Creating...
aws_ecr_repository.podinfo: Creating...
aws_iam_openid_connect_provider.github: Creation complete after 1s [id=arn:aws:iam::580073665957:oidc-provider/token.actions.githubusercontent.com]
aws_iam_role.gha_oidc: Creating...
aws_iam_policy.gha_policy: Creation complete after 1s [id=arn:aws:iam::580073665957:policy/dockyard-dev-gha-policy]
aws_secretsmanager_secret.super_secret: Creation complete after 1s [id=arn:aws:secretsmanager:eu-central-1:580073665957:secret:/dockyard/SUPER_SECRET_TOKEN-GSUrZ1]
aws_ecr_repository.podinfo: Creation complete after 1s [id=podinfo]
aws_iam_role.gha_oidc: Creation complete after 0s [id=dockyard-dev-gha-oidc]
aws_iam_role_policy_attachment.gha_attach: Creating...
aws_s3_bucket.deploy: Creation complete after 2s [id=dockyard-dev-deploy]
aws_iam_role_policy_attachment.gha_attach: Creation complete after 1s [id=dockyard-dev-gha-oidc/arn:aws:iam::580073665957:policy/dockyard-dev-gha-policy]
aws_dynamodb_table.tf_lock: Creation complete after 7s [id=dockyard-tf-lock]

Apply complete! Resources: 10 added, 0 changed, 0 destroyed.

Outputs:

deploy_bucket = "dockyard-dev-deploy"
ecr_repo_url = "580073665957.dkr.ecr.eu-central-1.amazonaws.com/podinfo"
oidc_role_arn = "arn:aws:iam::580073665957:role/dockyard-dev-gha-oidc"
fundamelikekaya@unknown5655cda88923 global % rm backend.tf 
fundamelikekaya@unknown5655cda88923 global % vim backend.tf
fundamelikekaya@unknown5655cda88923 global % terraform init \
  -backend-config="bucket=mk-dockyard-tfstate-12345" \
  -backend-config="key=global/terraform.tfstate" \
  -backend-config="region=eu-central-1" \
  -backend-config="dynamodb_table=mk-dockyard-tf-lock" \
  -backend-config="encrypt=true" \
  -migrate-state

Initializing the backend...
Terraform detected that the backend type changed from "local" to "s3".

╷
│ Warning: Deprecated Parameter
│ 
│   on backend.tf line 3, in terraform:
│    3:   backend "s3" {}
│ 
│ The parameter "dynamodb_table" is deprecated. Use parameter "use_lockfile" instead.
╵
╷
│ Error: Error inspecting states in the "local" backend:
│     S3 bucket "mk-dockyard-tfstate-12345" does not exist.
│ 
│ The referenced S3 bucket must have been previously created. If the S3 bucket
│ was created within the last minute, please wait for a minute or two and try
│ again.
│ 
│ Error: operation error S3: ListObjectsV2, https response error StatusCode: 404, RequestID: 341WZNP2JBGND5WM, HostID: pmQ58F2w/SggMEqkvT7W03fuuhnVopUEHQ4vhhfRclrDYSjlrXy1YA5wqj3XP7qiSKqUKVqAepY=, NoSuchBucket: 
│ 
│ 
│ Prior to changing backends, Terraform inspects the source and destination
│ states to determine what kind of migration steps need to be taken, if any.
│ Terraform failed to load the states. The data in both the source and the
│ destination remain unmodified. Please resolve the above error and try again.
│ 
│ 
╵
fundamelikekaya@unknown5655cda88923 global % vim backend.tf  
fundamelikekaya@unknown5655cda88923 global % aws s3 ls

2025-09-07 13:51:46 dockyard-dev-deploy
fundamelikekaya@unknown5655cda88923 global % ls
README.md		backend.tf		outputs.tf		terraform.tfstate	variables.tf
alarms.tf		main.tf			providers.tf		terraform.tfvars
fundamelikekaya@unknown5655cda88923 global % cat main.tf | grep dynamodb
resource "aws_dynamodb_table" "tf_lock" {
          "dynamodb:*",
fundamelikekaya@unknown5655cda88923 global % cat main.tf 
locals {
  name = "dockyard-${var.environment}"
}

# KMS CMK
resource "aws_kms_key" "cmk" {
  description             = "${local.name} CMK"
  deletion_window_in_days = 7
}

# ECR
resource "aws_ecr_repository" "podinfo" {
  name = "podinfo"

  image_scanning_configuration {
    scan_on_push = true
  }

  encryption_configuration {
    encryption_type = "KMS"
    kms_key         = aws_kms_key.cmk.arn
  }
}

# S3 bucket for CodeDeploy bundles
resource "aws_s3_bucket" "deploy" {
  bucket        = "${local.name}-deploy"
  force_destroy = true
}

# DynamoDB for TF state lock (if not pre-created)
resource "aws_dynamodb_table" "tf_lock" {
  name         = "dockyard-tf-lock"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }
}

# GitHub OIDC provider
resource "aws_iam_openid_connect_provider" "github" {
  url             = "https://token.actions.githubusercontent.com"
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = ["6938fd4d98bab03faadb97b34396831e3780aea1"]
}

# IAM role for GitHub Actions OIDC
resource "aws_iam_role" "gha_oidc" {
  name = "${local.name}-gha-oidc"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Action    = "sts:AssumeRoleWithWebIdentity",
      Principal = {
        Federated = aws_iam_openid_connect_provider.github.arn
      },
      Condition = {
        StringEquals = {
          "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com"
        },
        StringLike = {
          "token.actions.githubusercontent.com:sub" = [
            "repo:${var.github_owner}/${var.github_repo}:ref:refs/heads/${var.github_branch}"
          ]
        }
      }
    }]
  })
}

# Policy for GitHub Actions
resource "aws_iam_policy" "gha_policy" {
  name   = "${local.name}-gha-policy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ecr:*",
          "lambda:*",
          "codedeploy:*",
          "cloudwatch:*",
          "logs:*",
          "s3:*",
          "dynamodb:*",
          "secretsmanager:*"
        ],
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "gha_attach" {
  role       = aws_iam_role.gha_oidc.name
  policy_arn = aws_iam_policy.gha_policy.arn
}

# Secrets Manager secret
resource "aws_secretsmanager_secret" "super_secret" {
  name       = "/dockyard/SUPER_SECRET_TOKEN"
  kms_key_id = aws_kms_key.cmk.arn
}

fundamelikekaya@unknown5655cda88923 global % ls
README.md		backend.tf		outputs.tf		terraform.tfstate	variables.tf
alarms.tf		main.tf			providers.tf		terraform.tfvars
fundamelikekaya@unknown5655cda88923 global % cat main.tf 
locals {
  name = "dockyard-${var.environment}"
}

# KMS CMK
resource "aws_kms_key" "cmk" {
  description             = "${local.name} CMK"
  deletion_window_in_days = 7
}

# ECR
resource "aws_ecr_repository" "podinfo" {
  name = "podinfo"

  image_scanning_configuration {
    scan_on_push = true
  }

  encryption_configuration {
    encryption_type = "KMS"
    kms_key         = aws_kms_key.cmk.arn
  }
}

# S3 bucket for CodeDeploy bundles
resource "aws_s3_bucket" "deploy" {
  bucket        = "${local.name}-deploy"
  force_destroy = true
}

# DynamoDB for TF state lock (if not pre-created)
resource "aws_dynamodb_table" "tf_lock" {
  name         = "dockyard-tf-lock"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }
}

# GitHub OIDC provider
resource "aws_iam_openid_connect_provider" "github" {
  url             = "https://token.actions.githubusercontent.com"
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = ["6938fd4d98bab03faadb97b34396831e3780aea1"]
}

# IAM role for GitHub Actions OIDC
resource "aws_iam_role" "gha_oidc" {
  name = "${local.name}-gha-oidc"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Action    = "sts:AssumeRoleWithWebIdentity",
      Principal = {
        Federated = aws_iam_openid_connect_provider.github.arn
      },
      Condition = {
        StringEquals = {
          "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com"
        },
        StringLike = {
          "token.actions.githubusercontent.com:sub" = [
            "repo:${var.github_owner}/${var.github_repo}:ref:refs/heads/${var.github_branch}"
          ]
        }
      }
    }]
  })
}

# Policy for GitHub Actions
resource "aws_iam_policy" "gha_policy" {
  name   = "${local.name}-gha-policy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ecr:*",
          "lambda:*",
          "codedeploy:*",
          "cloudwatch:*",
          "logs:*",
          "s3:*",
          "dynamodb:*",
          "secretsmanager:*"
        ],
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "gha_attach" {
  role       = aws_iam_role.gha_oidc.name
  policy_arn = aws_iam_policy.gha_policy.arn
}

# Secrets Manager secret
resource "aws_secretsmanager_secret" "super_secret" {
  name       = "/dockyard/SUPER_SECRET_TOKEN"
  kms_key_id = aws_kms_key.cmk.arn
}

fundamelikekaya@unknown5655cda88923 global % cat backend.tf 
terraform {
  required_version = ">= 1.9.0"
  backend "s3" {}
}

fundamelikekaya@unknown5655cda88923 global % vim backend.tf 
fundamelikekaya@unknown5655cda88923 global % vim providers.tf 
fundamelikekaya@unknown5655cda88923 global % vim variables.tf 
fundamelikekaya@unknown5655cda88923 global % vim main.tf 
fundamelikekaya@unknown5655cda88923 global % vim variables.tf
fundamelikekaya@unknown5655cda88923 global % vim variables.tf
fundamelikekaya@unknown5655cda88923 global % vim terraform.tf
fundamelikekaya@unknown5655cda88923 global % vim terraform.tfvars 
fundamelikekaya@unknown5655cda88923 global % vim terraform.tfvars
fundamelikekaya@unknown5655cda88923 global % terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v6.12.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
fundamelikekaya@unknown5655cda88923 global % 
fundamelikekaya@unknown5655cda88923 global % 
fundamelikekaya@unknown5655cda88923 global % 
fundamelikekaya@unknown5655cda88923 global % terraform apply -auto-approve
aws_iam_openid_connect_provider.github: Refreshing state... [id=arn:aws:iam::580073665957:oidc-provider/token.actions.githubusercontent.com]
aws_iam_policy.gha_policy: Refreshing state... [id=arn:aws:iam::580073665957:policy/dockyard-dev-gha-policy]
aws_kms_key.cmk: Refreshing state... [id=b283d982-4892-4649-8161-58fa92ef5d73]
aws_cloudwatch_metric_alarm.high_error_rate: Refreshing state... [id=dockyard-dev-high-error-rate]
aws_dynamodb_table.tf_lock: Refreshing state... [id=dockyard-tf-lock]
aws_s3_bucket.deploy: Refreshing state... [id=dockyard-dev-deploy]
aws_secretsmanager_secret.super_secret: Refreshing state... [id=arn:aws:secretsmanager:eu-central-1:580073665957:secret:/dockyard/SUPER_SECRET_TOKEN-GSUrZ1]
aws_ecr_repository.podinfo: Refreshing state... [id=podinfo]
aws_iam_role.gha_oidc: Refreshing state... [id=dockyard-dev-gha-oidc]
aws_iam_role_policy_attachment.gha_attach: Refreshing state... [id=dockyard-dev-gha-oidc/arn:aws:iam::580073665957:policy/dockyard-dev-gha-policy]

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.tf_state will be created
  + resource "aws_s3_bucket" "tf_state" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "mk-dockyard-tfstate-12345"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_region               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = "eu-central-1"
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
aws_s3_bucket.tf_state: Creating...
aws_s3_bucket.tf_state: Creation complete after 2s [id=mk-dockyard-tfstate-12345]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

deploy_bucket = "dockyard-dev-deploy"
ecr_repo_url = "580073665957.dkr.ecr.eu-central-1.amazonaws.com/podinfo"
oidc_role_arn = "arn:aws:iam::580073665957:role/dockyard-dev-gha-oidc"
fundamelikekaya@unknown5655cda88923 global % vim backend.tf 
fundamelikekaya@unknown5655cda88923 global % vim terraform.tfvars 
fundamelikekaya@unknown5655cda88923 global % vim main.tf 
fundamelikekaya@unknown5655cda88923 global % cd ../global
terraform init \
  -backend-config="bucket=mk-dockyard-tfstate-12345" \
  -backend-config="key=global/terraform.tfstate" \
  -backend-config="region=eu-central-1" \
  -backend-config="dynamodb_table=dockyard-tf-lock" \
  -backend-config="encrypt=true" \
  -migrate-state

Initializing the backend...
Terraform detected that the backend type changed from "local" to "s3".

Do you want to copy existing state to the new backend?
  Pre-existing state was found while migrating the previous "local" backend to the
  newly configured "s3" backend. No existing state was found in the newly
  configured "s3" backend. Do you want to copy this state to the new "s3"
  backend? Enter "yes" to copy and "no" to start with an empty state.

  Enter a value: yes


Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v6.12.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
fundamelikekaya@unknown5655cda88923 global % vim backend.tf 
fundamelikekaya@unknown5655cda88923 global % cat main.tf 
locals {
  name = "dockyard-${var.environment}"
}

# KMS CMK
resource "aws_kms_key" "cmk" {
  description             = "${local.name} CMK"
  deletion_window_in_days = 7
}

# ECR
resource "aws_ecr_repository" "podinfo" {
  name = "podinfo"

  image_scanning_configuration {
    scan_on_push = true
  }

  encryption_configuration {
    encryption_type = "KMS"
    kms_key         = aws_kms_key.cmk.arn
  }
}

# S3 bucket for CodeDeploy bundles
resource "aws_s3_bucket" "deploy" {
  bucket        = "${local.name}-deploy"
  force_destroy = true
}

resource "aws_s3_bucket" "tf_state" {
  bucket        = var.tf_state_bucket_name
  force_destroy = false

  # İstersen aşağıyı açabilirsin:
  # versioning {
  #   enabled = true
  # }
  # server_side_encryption_configuration {
  #   rule {
  #     apply_server_side_encryption_by_default { sse_algorithm = "AES256" }
  #   }
  # }

  lifecycle {
    prevent_destroy = true
  }
}

# DynamoDB for TF state lock (if not pre-created)
resource "aws_dynamodb_table" "tf_lock" {
  name         = "dockyard-tf-lock"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }

  lifecycle {
    prevent_destroy = true
  }
}

# GitHub OIDC provider
resource "aws_iam_openid_connect_provider" "github" {
  url             = "https://token.actions.githubusercontent.com"
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = ["6938fd4d98bab03faadb97b34396831e3780aea1"]
}

# IAM role for GitHub Actions OIDC
resource "aws_iam_role" "gha_oidc" {
  name = "${local.name}-gha-oidc"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Action    = "sts:AssumeRoleWithWebIdentity",
      Principal = {
        Federated = aws_iam_openid_connect_provider.github.arn
      },
      Condition = {
        StringEquals = {
          "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com"
        },
        StringLike = {
          "token.actions.githubusercontent.com:sub" = [
            "repo:${var.github_owner}/${var.github_repo}:ref:refs/heads/${var.github_branch}"
          ]
        }
      }
    }]
  })
}

# Policy for GitHub Actions
resource "aws_iam_policy" "gha_policy" {
  name   = "${local.name}-gha-policy"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ecr:*",
          "lambda:*",
          "codedeploy:*",
          "cloudwatch:*",
          "logs:*",
          "s3:*",
          "dynamodb:*",
          "secretsmanager:*"
        ],
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "gha_attach" {
  role       = aws_iam_role.gha_oidc.name
  policy_arn = aws_iam_policy.gha_policy.arn
}

# Secrets Manager secret
resource "aws_secretsmanager_secret" "super_secret" {
  name       = "/dockyard/SUPER_SECRET_TOKEN"
  kms_key_id = aws_kms_key.cmk.arn
}

fundamelikekaya@unknown5655cda88923 global % cd ..
fundamelikekaya@unknown5655cda88923 infra % ls
ec2	global	lambda
fundamelikekaya@unknown5655cda88923 infra % git status

On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   global/alarms.tf
	modified:   global/backend.tf
	modified:   global/main.tf
	modified:   global/outputs.tf
	modified:   global/providers.tf
	modified:   global/variables.tf

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	global/.terraform.lock.hcl
	global/terraform.tfstate.backup
	global/terraform.tfvars

no changes added to commit (use "git add" and/or "git commit -a")
fundamelikekaya@unknown5655cda88923 infra % cd ..    
fundamelikekaya@unknown5655cda88923 CressoftTask % git add .

fundamelikekaya@unknown5655cda88923 CressoftTask % cd infra 
fundamelikekaya@unknown5655cda88923 infra % git add .

fundamelikekaya@unknown5655cda88923 infra % cd ..
fundamelikekaya@unknown5655cda88923 CressoftTask % git commit -m "Update infra/global: add tf_state bucket + DynamoDB lock, update variables and outputs"

[main 9d229f1] Update infra/global: add tf_state bucket + DynamoDB lock, update variables and outputs
 Committer: funda melike kaya <fundamelikekaya@unknown5655cda88923.home>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 9 files changed, 643 insertions(+), 3 deletions(-)
 create mode 100644 infra/global/.terraform.lock.hcl
 create mode 100644 infra/global/terraform.tfstate.backup
 create mode 100644 infra/global/terraform.tfvars
fundamelikekaya@unknown5655cda88923 CressoftTask % 
fundamelikekaya@unknown5655cda88923 CressoftTask % 
fundamelikekaya@unknown5655cda88923 CressoftTask % git push origin main

Enumerating objects: 22, done.
Counting objects: 100% (22/22), done.
Delta compression using up to 10 threads
Compressing objects: 100% (12/12), done.
Writing objects: 100% (13/13), 6.84 KiB | 6.84 MiB/s, done.
Total 13 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/melike-kaya/CressoftTask.git
   612a9f5..9d229f1  main -> main
fundamelikekaya@unknown5655cda88923 CressoftTask % 
